{
    "collab_server" : "",
    "contents" : "function(input, output, session) {\n  #Players ----\n  # Player Table\n  tableData <-\n    eventReactive(eventExpr = input$submit_button_player,\n                  ignoreNULL = F,\n                  {\n                    selected_position <- if (input$position == \"All\") {\n                      all_positions\n                    } else if (input$position == \"Skaters\") {\n                      c(\"F\", \"D\")\n                    } else {\n                      input$position\n                    }\n                    selected_team <-\n                      if (input$team_table == \"All\") {\n                        team_names\n                      } else {\n                        input$team_table\n                      }\n                    \n                    data <- player_data %>%\n                      filter(\n                        Position %in% selected_position,\n                        Team %in% selected_team,\n                        Season %in% min(input$season):max(input$season)\n                      )\n                    \n                    aggregate_option <-\n                      if (input$aggregate == \"Season\") {\n                        data1 <- data %>%\n                          group_by(Player, Position, Team, Season) %>%\n                          summarise_if(is.numeric, sum, na.rm = T) %>%\n                          mutate(GF. = ifelse((eGF + eGA) > 0, round(eGF / (eGF + eGA), 2), NA_integer_)) %>%\n                          left_join(toi_data, by = c(\"Player\", \"Team\", \"Season\"))\n                        data2 <- data %>%\n                          group_by(Player, Position, Team, Season) %>%\n                          summarise(GP = n())\n                        inner_join(data1, data2, by = c(\"Player\", \"Position\", \"Team\", \"Season\")) %>%\n                          select(Player:Season, GP, eTOI, G:GA) %>%\n                          filter(GP %in% min(input$games_played):max(input$games_played))\n                      } else if (input$aggregate == \"Career\") {\n                        data1 <- data %>%\n                          group_by(Player, Position, Team, Season) %>%\n                          summarise_if(is.numeric, sum, na.rm = T) %>%\n                          left_join(toi_data, by = c(\"Player\", \"Team\", \"Season\")) %>%\n                          ungroup() %>%\n                          select(-Season) %>%\n                          group_by(Player, Position, Team) %>%\n                          summarise_if(is.numeric, sum, na.rm = T) %>%\n                          mutate(GF. = ifelse((eGF + eGA) > 0, round(eGF / (eGF + eGA), 2), NA_integer_))\n                        data2 <- data %>%\n                          group_by(Player, Position, Team) %>%\n                          summarise(GP = n())\n                        inner_join(data1, data2, by = c(\"Player\", \"Position\", \"Team\")) %>%\n                          select(Player:Team, GP, eTOI, G:GA) %>%\n                          filter(GP %in% min(input$games_played):max(input$games_played))\n                      } else{\n                        select(data, Player:Team, Season, everything())\n                      }\n                    aggregate_option <- aggregate_option %>%\n                      rename(Plus = eGF,\n                             Minus = eGA) %>%\n                      mutate('Sh%' = round(G / SOG, 2)) %>%\n                      select(Player:TO, 'Sh%', SV, GA)\n                    \n                    new_data <-\n                      if (input$pergame == \"per Game\" &\n                          input$aggregate == \"Season\") {\n                        aggregate_option %>%\n                          mutate(Season = as.character(Season),\n                                 GP = as.character(GP)) %>%\n                          mutate_if(is.numeric, funs(round(. / as.numeric(GP), 2))) %>%\n                          mutate(Season = as.numeric(Season),\n                                 'Sh%' = round(G / SOG, 2))\n                      } else if (input$pergame == \"per Game\" &\n                                 input$aggregate == \"Career\") {\n                        aggregate_option %>%\n                          mutate(GP = as.character(GP)) %>%\n                          mutate_if(is.numeric, funs(round(. / as.numeric(GP), 2))) %>%\n                          mutate('Sh%' = round(G / SOG, 2))\n                      } else if (input$pergame == \"per 60\" &\n                                 input$aggregate == \"Season\") {\n                        aggregate_option %>%\n                          filter(eTOI > 0, Position != \"G\") %>%\n                          mutate(\n                            Season = as.character(Season),\n                            GP = as.character(GP),\n                            eTOI = as.character(eTOI)\n                          ) %>%\n                          mutate_if(is.numeric, funs(round((\n                            . / as.numeric(eTOI)\n                          ) * 60, 2))) %>%\n                          mutate(\n                            Season = as.numeric(Season),\n                            eTOI = as.numeric(eTOI),\n                            'Sh%' = round(G / SOG, 2)\n                          )\n                      } else if (input$pergame == \"per 60\" &\n                                 input$aggregate == \"Career\") {\n                        aggregate_option %>%\n                          filter(eTOI > 0, Position != \"G\") %>%\n                          mutate(GP = as.character(GP),\n                                 eTOI = as.character(eTOI)) %>%\n                          mutate_if(is.numeric, funs(round((\n                            . / as.numeric(eTOI)\n                          ) * 60, 2))) %>%\n                          mutate('Sh%' = round(G / SOG, 2))\n                      } else{\n                        aggregate_option\n                      }\n                    new_data$eTOI <- ifelse(new_data$Position == \"G\", 0, new_data$eTOI)\n                    return(new_data)\n                  })\n  output$gameStats <- renderDataTable({\n    start_index <- ifelse(\"Game.ID\" %in% colnames(tableData()), 9, 5)\n    sort_index <-\n      ifelse(\"Game.ID\" %in% colnames(tableData()), 13, 11)\n    \n    b <- datatable(\n      tableData(),\n      class = 'cell-border stripe',\n      style = 'bootstrap',\n      selection = \"single\",\n      extensions = c('FixedColumns', \"FixedHeader\"),\n      options = list(\n        pageLength = 25,\n        searchHighlight = TRUE,\n        scrollX = T,\n        order = list(list(sort_index, 'desc')),\n        columnDefs = list(list(\n          orderSequence = c('desc', 'asc'),\n          targets = \"_all\"\n        )),\n        fixedHeader = TRUE,\n        fixedColumns = list(leftColumns = 1),\n        initComplete = JS(\n          \"function(settings, json) {\",\n          \"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});\",\n          \"}\"\n        )\n      ),\n      rownames = F\n    )\n    # for(i in start_index:length(colnames(tableData()))){\n    #   b <- b %>%\n    #     formatStyle(colnames(tableData())[i],\n    #                 background = styleColorBar(range(tableData()[,i], na.rm = T),\n    #                                            'lightblue',\n    #                                            angle = -90),\n    #                 backgroundPosition = 'left',\n    #                 backgroundRepeat = 'no-repeat',\n    #                 textAlign = \"left\")\n    # }\n    b\n  })\n  \n  # League Leaders\n  leadersData <-\n    eventReactive(eventExpr = input$submit_buttom_leader,\n                  ignoreNULL = F,\n                  {\n                    selected_position <- if (input$leader_position == \"All\") {\n                      all_positions\n                    } else {\n                      input$leader_position\n                    }\n                    selected_team <-\n                      if (input$leader_team == \"All\") {\n                        team_names\n                      } else {\n                        input$leader_team\n                      }\n                    \n                    data_set <- player_data %>%\n                      filter(\n                        Position %in% selected_position,\n                        Team %in% selected_team,\n                        Season %in% min(input$season_leader):max(input$season_leader)\n                      ) %>%\n                      group_by(Player, Position, Team, Season) %>%\n                      group_by(GP = n(), add = TRUE) %>%\n                      summarise_if(is.numeric, sum, na.rm = T) %>%\n                      mutate(GF. = ifelse((eGF + eGA) > 0, round(eGF / (eGF + eGA), 2), NA_integer_)) %>%\n                      select(Player, Position, Team, Season, PrPTS, G, A1, A2, GP) %>%\n                      filter(GP > input$GP_filter) %>%\n                      mutate_if(funs(is.numeric(.) &\n                                       input$leader_pergame == T), funs(round(. / GP, 2))) %>%\n                      arrange(desc(PrPTS)) %>%\n                      head(20) %>%\n                      ungroup() %>%\n                      mutate(\n                        isSingle = min(input$season_leader) == max(input$season_leader),\n                        Player = ifelse(isSingle, Player, paste(Player, Season))\n                      ) %>%\n                      melt(\n                        id.vars = c(\"Player\", \"Position\", \"Team\", \"PrPTS\"),\n                        measure.vars = c(\"G\", \"A1\", \"A2\")\n                      )\n                    \n                    data_set$Player <-\n                      factor(data_set$Player,\n                             levels = unique(data_set$Player[order(data_set$PrPTS)]),\n                             ordered = T)\n                    \n                    data_set\n                    \n                  })\n  output$leagueChart <- renderPlot({\n    ggplot(leadersData()) +\n      geom_col(aes(x = Player, y = value, fill = variable),\n               position = position_stack(reverse = T)) +\n      scale_fill_manual(\n        \"\",\n        values = c(\"indianred\", \"navyblue\", \"skyblue\"),\n        labels = c(\"G\", \"A1\", \"A2\"),\n        drop = F\n      ) +\n      coord_flip() +\n      theme_classic() +\n      xlab('') +\n      ylab(\"Points\") +\n      theme(\n        axis.title = element_text(size = 16),\n        axis.text = element_text(size = 14),\n        legend.text = element_text(size = 12)\n      )\n  })\n  \n  # Player Profile\n  player_info <- reactive({\n    test1 <- player_data %>%\n      filter(Season == as.numeric(input$season_profile)) %>%\n      select(-Season) %>%\n      group_by(Player, Position) %>%\n      summarise_if(is.numeric, sum, na.rm = T) %>%\n      mutate(GF. = ifelse((eGF + eGA) > 0, round(eGF / (eGF + eGA), 2), NA_integer_)) %>%\n      ungroup()\n    test2 <- player_data %>%\n      filter(Season == as.numeric(input$season_profile)) %>%\n      select(-Season) %>%\n      group_by(Player, Position) %>%\n      summarise(GP = n())\n    test <- if (input$isGP == T) {\n      inner_join(test1, test2, by = c(\"Player\", \"Position\")) %>%\n        group_by(Position) %>%\n        mutate_at(vars(GS, SV, GA, G, PTS, PrPTS, SOG, eGF, eGA),\n                  funs(\"PG\" = round(. / GP, 2))) %>%\n        mutate_if(is.numeric, funs(\"01\" = standardize)) %>%\n        filter(Player == input$player_select)\n    } else{\n      inner_join(test1, test2, by = c(\"Player\", \"Position\")) %>%\n        group_by(Position) %>%\n        mutate_if(is.numeric, funs(\"01\" = standardize)) %>%\n        filter(Player == input$player_select)\n    }\n    if (nrow(test) == 0) {\n      return(NULL)\n    }\n    \n    if (test$Position == \"G\" & input$isGP == T) {\n      melted <- melt(test, id.vars = c(1:2))\n      melted_data <-\n        melted %>% filter(variable %in% c(\"GS_PG\", \"SV_PG\", \"GA_PG\"))\n      melted_label <-\n        melted %>% filter(variable %in% c(\"GS_PG_01\", \"SV_PG_01\", \"GA_PG_01\"))\n      melted <- cbind(melted_data, melted_label[, 4])\n      colnames(melted)[5] <- \"percentile\"\n      #Renames everything\n      melted2 <- melted %>%\n        mutate(\n          variable = case_when(\n            variable == \"SV_PG\" ~ \"Saves per game\",\n            variable == \"GA_PG\" ~ \"Goals Allowed per game\",\n            variable == \"GS_PG\" ~ \"Game Score per game\"\n          )\n        )\n    } else if (test$Position != \"G\" & input$isGP == T) {\n      melted <- melt(test, id.vars = c(1:2))\n      melted_data <-\n        melted %>% filter(\n          variable %in% c(\n            \"G_PG\",\n            \"PTS_PG\",\n            \"PrPTS_PG\",\n            \"GS_PG\",\n            \"SOG_PG\",\n            \"eGF_PG\",\n            \"eGA_PG\"\n          )\n        )\n      melted_label <-\n        melted %>% filter(variable %in% paste(\n          c(\"G\", \"PTS\", \"PrPTS\", \"GS\", \"SOG\", \"eGF\", \"eGA\"),\n          \"_PG_01\",\n          sep = ''\n        ))\n      melted <- cbind(melted_data, melted_label[, 4])\n      colnames(melted)[5] <- \"percentile\"\n      #Renames everything\n      melted2 <- melted %>%\n        mutate(\n          variable = case_when(\n            variable == \"G_PG\" ~ \"Goals per game\",\n            variable == \"PTS_PG\" ~ \"Points per game\",\n            variable == \"PrPTS_PG\" ~ \"Primary Points per game\",\n            variable == \"GS_PG\" ~ \"Game Score per game\",\n            variable == \"SOG_PG\" ~ \"Shots on Goal per game\",\n            variable == \"eGF_PG\" ~ \"5v5 Goals For per game\",\n            variable == \"eGA_PG\" ~ \"5v5 Goals Against per game\"\n          )\n        )\n    } else if (test$Position == \"G\" & input$isGP == F) {\n      melted <- melt(test, id.vars = c(1:2))\n      melted_data <-\n        melted %>% filter(variable %in% c(\"GS\", \"SV\", \"GA\"))\n      melted_label <-\n        melted %>% filter(variable %in% c(\"GS_01\", \"SV_01\", \"GA_01\"))\n      melted <- cbind(melted_data, melted_label[, 4])\n      colnames(melted)[5] <- \"percentile\"\n      #Renames everything\n      melted2 <- melted %>%\n        mutate(\n          variable = case_when(\n            variable == \"SV\" ~ \"Saves\",\n            variable == \"GA\" ~ \"Goals Allowed\",\n            variable == \"GS\" ~ \"Game Score\"\n          )\n        )\n    } else{\n      melted <- melt(test, id.vars = c(1:2))\n      melted_data <-\n        melted %>% filter(variable %in% c(\"G\", \"PTS\", \"PrPTS\", \"GS\", \"SOG\", \"eGF\", \"eGA\"))\n      melted_label <-\n        melted %>% filter(variable %in% paste(\n          c(\"G\", \"PTS\", \"PrPTS\", \"GS\", \"SOG\", \"eGF\", \"eGA\"),\n          \"_01\",\n          sep = ''\n        ))\n      melted <- cbind(melted_data, melted_label[, 4])\n      colnames(melted)[5] <- \"percentile\"\n      #Renames everything\n      melted2 <- melted %>%\n        mutate(\n          variable = case_when(\n            variable == \"G\" ~ \"Goals\",\n            variable == \"PTS\" ~ \"Points\",\n            variable == \"PrPTS\" ~ \"Primary Points\",\n            variable == \"GS\" ~ \"Game Score\",\n            variable == \"SOG\" ~ \"Shots on Goal\",\n            variable == \"eGF\" ~ \"5v5 Goals For\",\n            variable == \"eGA\" ~ \"5v5 Goals Against\"\n          )\n        )\n    }\n    \n    melted2\n  })\n  output$playerProfs <- renderPlot({\n    data <- player_info()\n    \n    if (!is.null(data)) {\n      ggplot(data) +\n        geom_col(aes(x = variable,\n                     y = percentile,\n                     fill = percentile), color = \"black\") +\n        geom_hline(yintercept = 1,\n                   col = \"black\",\n                   size = 2) +\n        geom_text(aes(\n          x = variable,\n          y = (percentile - 0.1),\n          label = value\n        ), size = 12) +\n        scale_fill_gradientn(\n          colors = c(\"red\", \"white\", \"blue\"),\n          values = c(0, 0.5, 1),\n          limits = c(0, 1)\n        ) +\n        scale_y_continuous(limits = c(0, 1),\n                           breaks = seq(0.2, 0.8, 0.2)) +\n        ylab(\"Position Percentile\") +\n        xlab(\"\") +\n        theme(axis.text = element_text(size = 14),\n              axis.title = element_text(size = 16)) +\n        theme_bw() +\n        coord_flip()\n    } else{\n      ggplot(data.frame())\n    }\n  })\n  output$picture <- renderText({\n    roster_data <- filter(roster_data, Season == input$season_profile)\n    if (input$season_profile == 2015) {\n      \"no image available\"\n    } else {\n      c('<img src=\"',\n        roster_data$thumbnail[roster_data$Player == input$player_select],\n        '\">')\n    }\n    \n    \n  })\n  output$playerInfo <- renderText({\n    roster_data <- filter(roster_data, Season == input$season_profile)\n    a <-\n      paste(\"Position\", roster_data$position[roster_data$Player == input$player_select])\n    player_url <-\n      roster_data$url[roster_data$Player == input$player_select]\n    if (length(player_url) != 0) {\n      table <- readHTMLTable(getURL(player_url), header = F)[[1]]\n      if (!is.null(table)) {\n        tabletext <- apply(table, 1, paste, collapse = \": \")\n        paste(c(a, tabletext), collapse = \"<br>\")\n      } else{\n        \"           bio not available\"\n      }\n    } else {\n      \"           bio not available\"\n    }\n  })\n  observe({\n    players <- filter(roster_data, Season == input$season_profile)\n    names <- paste(players$first_name, players$last_name)\n    \n    names <- names[order(players$last_name)]\n    \n    updateSelectizeInput(\n      session,\n      \"player_select\",\n      label = \"Select Player\",\n      choices = names,\n      selected = input$player_select\n    )\n  })\n  \n  # Player Comparison Tableau\n  output$tableauComp <- renderUI({\n    HTML(\n      \"<div class='tableauPlaceholder' id='viz1536291250502' style='position: relative'><noscript><a href='#'><img alt='Comparison Dashboard ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;NW&#47;NWHLTwo-PlayerComparisonTool&#47;ComparisonDashboard&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='NWHLTwo-PlayerComparisonTool&#47;ComparisonDashboard' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;NW&#47;NWHLTwo-PlayerComparisonTool&#47;ComparisonDashboard&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /></object></div>                <script type='text/javascript'>                    var divElement = document.getElementById('viz1536291250502');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='820px';vizElement.style.height='527px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                </script>\"\n    )\n  })\n  \n  # Point Shares\n  ps <-\n    eventReactive(eventExpr = input$submit_button_ps,\n                  ignoreNULL = F,\n                  {\n                    selected_position <- if (input$position_ps == \"All\") {\n                      all_positions\n                    } else if (input$position_ps == \"Skaters\") {\n                      c(\"F\", \"D\")\n                    } else {\n                      input$position_ps\n                    }\n                    selected_team <-\n                      if (input$team_table_ps == \"All\") {\n                        team_names\n                      } else {\n                        input$team_table_ps\n                      }\n                    \n                    a <- pointshare_data %>%\n                      filter(Team %in% selected_team,\n                             Pos %in% selected_position,\n                             Season %in% min(input$season_ps):max(input$season_ps)) %>%\n                      left_join(toi_data, by = c(\"Player\", \"Team\", \"Season\")) %>%\n                      select(-G:-A2) %>%\n                      select(Season, Player, Team, Pos, eTOI, everything()) %>%\n                      mutate(\n                        Season = as.character(Season),\n                        GP = as.character(GP),\n                        eTOI = as.character(eTOI)\n                      )\n                    \n                    b <- if (input$pergame_ps == \"per Game\") {\n                      a %>%\n                        mutate_if(is.numeric, funs(round(. / as.numeric(GP), 2)))\n                    } else if (input$pergame_ps == \"per 60\") {\n                      a %>%\n                        mutate_if(is.numeric, funs(round(. / as.numeric(eTOI) * 60, 2)))\n                    } else{\n                      a\n                    }\n                    b %>% mutate(GP = as.numeric(GP), eTOI = as.numeric(eTOI))\n                    \n                  })\n  output$pointShares <- renderDataTable({\n    datatable(\n      ps(),\n      class = 'cell-border stripe',\n      style = 'bootstrap',\n      selection = \"single\",\n      options = list(\n        pageLength = 25,\n        searchHighlight = TRUE,\n        scrollX = T,\n        scrollY = '500px',\n        order = list(list(8, 'desc')),\n        columnDefs = list(list(\n          orderSequence = c('desc', 'asc'),\n          targets = \"_all\"\n        )),\n        initComplete = JS(\n          \"function(settings, json) {\",\n          \"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});\",\n          \"}\"\n        )\n      ),\n      rownames = F\n    )\n  })\n  \n  #Teams ----\n  \n  # Team Table\n  teamData <-\n    eventReactive(eventExpr = input$submit_button_team,\n                  ignoreNULL = F,\n                  {\n                    selected_team <- if (input$team_selection == \"All\") {\n                      team_names\n                    } else {\n                      input$team_selection\n                    }\n                    team_data <- filter(\n                      team_data,\n                      Team %in% selected_team,\n                      Season %in% min(input$team_season):max(input$team_season)\n                    )\n                    if (input$team_aggregate == \"Season\") {\n                      data1 <- team_data %>%\n                        group_by(Team, Season) %>%\n                        summarise_if(is.numeric, sum, na.rm = T) %>%\n                        select(-game_id) %>%\n                        mutate(\n                          SF. = round(SF / (SF + SA), 2),\n                          SF_5v5. = round(SF_5v5 / (SF_5v5 + SA_5v5), 2),\n                          Sh. = round(GF / SF, 2),\n                          Sv. = round(1 - GA / SA, 2),\n                          PDO = Sh. + Sv.\n                        )\n                      data2 <- team_data %>%\n                        group_by(Team, Season) %>%\n                        summarise(GP = n())\n                      inner_join(data1, data2, by = c(\"Team\", \"Season\")) %>%\n                        select(Team, Season, GP, everything()) %>%\n                        mutate(Season = as.character(Season),\n                               GP = as.character(GP)) %>%\n                        mutate_if(funs(is.numeric(.) &\n                                         input$per_game_team == T),\n                                  funs(round(. / as.numeric(GP), 2))) %>%\n                        mutate(\n                          SF. = round(SF / (SF + SA), 2),\n                          SF_5v5. = round(SF_5v5 / (SF_5v5 + SA_5v5), 2),\n                          Sh. = round(GF / SF, 2),\n                          Sv. = round(1 - GA / SA, 2),\n                          PDO = Sh. + Sv.\n                        )\n                    } else if (input$team_aggregate == \"Aggregate Seasons\") {\n                      data1 <- team_data %>%\n                        group_by(Team) %>%\n                        summarise_if(is.numeric, sum, na.rm = T) %>%\n                        select(-game_id, -Season) %>%\n                        mutate(\n                          SF. = round(SF / (SF + SA), 2),\n                          SF_5v5. = round(SF_5v5 / (SF_5v5 + SA_5v5), 2),\n                          Sh. = round(GF / SF, 2),\n                          Sv. = round(1 - GA / SA, 2),\n                          PDO = Sh. + Sv.\n                        )\n                      data2 <- team_data %>%\n                        group_by(Team) %>%\n                        summarise(GP = n())\n                      inner_join(data1, data2, by = c(\"Team\")) %>%\n                        select(Team, GP, everything()) %>%\n                        mutate(GP = as.character(GP)) %>%\n                        mutate_if(funs(is.numeric(.) &\n                                         input$per_game_team == T),\n                                  funs(round(. / as.numeric(GP), 2))) %>%\n                        mutate(\n                          SF. = round(SF / (SF + SA), 2),\n                          SF_5v5. = round(SF_5v5 / (SF_5v5 + SA_5v5), 2),\n                          Sh. = round(GF / SF, 2),\n                          Sv. = round(1 - GA / SA, 2),\n                          PDO = Sh. + Sv.\n                        )\n                    } else{\n                      select(team_data, Season, everything())\n                    }\n                  })\n  output$teamStats <- renderDataTable({\n    b <- datatable(\n      teamData(),\n      class = 'cell-border stripe',\n      style = 'bootstrap',\n      options = list(\n        searchHighlight = TRUE,\n        scrollX = T,\n        columnDefs = list(list(\n          orderSequence = c('desc', 'asc'),\n          targets = \"_all\"\n        )),\n        #order = list(list(sort_index, 'desc')),\n        initComplete = JS(\n          \"function(settings, json) {\",\n          \"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});\",\n          \"}\"\n        )\n      ),\n      rownames = F\n    )\n    # for(i in start_index:length(colnames(teamData()))){\n    #   b <- b %>%\n    #     formatStyle(colnames(teamData())[i],\n    #                 background = styleColorBar(range(teamData()[,i], na.rm = T),\n    #                                            'lightblue',\n    #                                            angle = -90),\n    #                 backgroundPosition = 'left',\n    #                 backgroundRepeat = 'no-repeat',\n    #                 textAlign = \"left\")\n    # }\n    b\n  })\n  \n  # Projected Points Tableau\n  output$tableauPoints <- renderUI({\n    HTML(\n      \"<div class='tableauPlaceholder' id='viz1536290907106' style='position: relative'><noscript><a href='#'><img alt='Dashboard 1 ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;NW&#47;NWHL2019ProjectedGoals&#47;Dashboard1&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='NWHL2019ProjectedGoals&#47;Dashboard1' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;NW&#47;NWHL2019ProjectedGoals&#47;Dashboard1&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /></object></div>                <script type='text/javascript'>                    var divElement = document.getElementById('viz1536290907106');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.minWidth='420px';vizElement.style.maxWidth='650px';vizElement.style.width='100%';vizElement.style.minHeight='827px';vizElement.style.maxHeight='887px';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.minWidth='420px';vizElement.style.maxWidth='650px';vizElement.style.width='100%';vizElement.style.minHeight='827px';vizElement.style.maxHeight='887px';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else { vizElement.style.width='100%';vizElement.style.height='727px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                </script>\"\n    )\n  })\n  \n  #Charts ----\n  \n  # Simple Shot Chart\n  shotData <-\n    eventReactive(eventExpr = input$submit_button_shotchart,\n                  ignoreNULL = F,\n                  {\n                    selected_states <-\n                      if (input$state_sc == \"All\") {\n                        states\n                      } else{\n                        input$state_sc\n                      }\n                    selected_team <-\n                      if (input$team_sc == \"All\") {\n                        team_names\n                      } else{\n                        input$team_sc\n                      }\n                    selected_player <-\n                      if (input$player_sc == \"All\") {\n                        player_names\n                      } else{\n                        input$player_sc\n                      }\n                    \n                    b <- pbp_data %>%\n                      filter(\n                        event_player_1 %in% selected_player,\n                        event_team %in% selected_team,\n                        state %in% selected_states,\n                        Season %in% min(input$shot_chart_season):max(input$shot_chart_season),\n                        event_type %in% c(\"Shot\", \"Goal\")\n                      ) %>%\n                      select(event_type, x_coord_1, y_coord_1) %>%\n                      bind_rows(a)\n                  })\n  output$shotChart <- renderPlot({\n    if (nrow(shotData()) == 2) {\n      \n      options(warn = -1)\n      plot <- rink\n      options(warn = 0)\n    } else{\n      shot_count <- shotData() %>% summarise(n())\n      options(warn= -1)\n      plot <- rink +\n        geom_point(\n          data = shotData(),\n          aes(x = x_coord_1,\n              y = y_coord_1,\n              color = event_type),\n          size = 5,\n          alpha = 0.5\n        ) +\n        scale_color_manual(\n          values = c(\"darkgreen\", \"navyblue\"),\n          labels = c(\"Goal\", \"Shot on Goal\"),\n          drop = F\n        ) +\n        labs(color = \"Shot Type\") +\n        theme(\n          legend.text = element_text(size = 14),\n          legend.title = element_text(size = 16),\n          plot.title = element_text(size = 18, hjust = 0.5)\n        ) +\n        ggtitle(paste(shot_count, \"Shots on Goal\"))\n      options(warn= 0)\n    }\n    return(plot)\n  })\n  observe({\n    selected_team <-\n      if (input$team_sc == \"All\" | !isTruthy(input$player_sc)) {\n        team_names\n      } else{\n        input$team_sc\n      }\n    \n    players <- unique(\n      filter(\n        pbp_data,\n        Season %in% min(input$shot_chart_season):max(input$shot_chart_season),\n        event_team %in% selected_team,\n        event_type %in% c(\"Shot\",\"Goal\")\n      )$event_player_1\n    )\n    players <- gsub(\"\\\\s+\", \" \", players[!is.na(players)])\n    \n    last_name <-\n      unlist(lapply(\n        strsplit(players, \" \"),\n        FUN = function(x) {\n          x[2]\n        }\n      ))\n    \n    names <- players[order(last_name)]\n    \n    updateSelectizeInput(\n      session,\n      \"player_sc\",\n      \"Player\",\n      choices = c(\"All\", names),\n      selected = input$player_sc\n    )\n  })\n  observe({\n    selected_player <-\n      if (input$player_sc == \"All\" | !isTruthy(input$player_sc)) {\n        player_names\n      } else{\n        input$player_sc\n      }\n    \n    teams <- unique(\n      filter(\n        pbp_data,\n        Season %in% min(input$shot_chart_season):max(input$shot_chart_season),\n        event_player_1 %in% selected_player\n      )$event_team\n    )\n    \n    updateSelectInput(\n      session,\n      \"team_sc\",\n      \"Team\",\n      choices = c(\"All\", teams),\n      selected = input$team_sc\n    )\n  })\n  observe({\n    selected_player <-\n      if (input$player_sc == \"All\" | !isTruthy(input$player_sc)) {\n        player_names\n      } else{\n        input$player_sc\n      }\n    \n    selected_team <-\n      if (input$team_sc == \"All\" | !isTruthy(input$team_sc)) {\n        team_names\n      } else{\n        input$team_sc\n      }\n    \n    seasons <- unique(pbp_data$Season[which(pbp_data$event_player_1 %in% selected_player &\n                                              pbp_data$event_team %in% selected_team &\n                                              !is.na(pbp_data$x_coord) & pbp_data$event_type %in% c(\"Shot\",\"Goal\"))])\n    updateSliderInput(\n      session,\n      \"shot_chart_season\",\n      \"Season\",\n      min = min(seasons),\n      max = max(seasons),\n      step = 1,\n      value = c(min(seasons), max(seasons))\n    )\n  })\n  \n  # Tableau Shot Chart\n  output$tableauShotChart <- renderUI({\n    HTML(\n      \"<div class='tableauPlaceholder' id='viz1536299668550' style='position: relative'><noscript><a href='#'><img alt='17-18 NWHL Game Events ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;NW&#47;NWHLGameEvents&#47;17-18NWHLGameEvents&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='NWHLGameEvents&#47;17-18NWHLGameEvents' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;NW&#47;NWHLGameEvents&#47;17-18NWHLGameEvents&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /></object></div>                <script type='text/javascript'>                    var divElement = document.getElementById('viz1536299668550');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.minWidth='420px';vizElement.style.maxWidth='1050px';vizElement.style.width='100%';vizElement.style.minHeight='587px';vizElement.style.maxHeight='887px';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                </script>\"\n    )\n  })\n  \n  #Games ----\n  \n  #Text Viewer\n  pbp_game <- reactive({\n    pbp_data %>%\n      mutate(game = paste(game_date, home_team, away_team)) %>%\n      filter(game == input$game_code) %>%\n      select(period,\n             min,\n             sec,\n             event_team,\n             event_type,\n             event_player_1,\n             home_score,\n             away_score) %>%\n      rename(Event = event_type,\n             Player = event_player_1)\n  })\n  output$pbpViewer <- renderDataTable({\n    datatable(\n      pbp_game(),\n      #style = 'compact',\n      options = list(\n        scrollX = F,\n        scrollY = '400px',\n        scrollCollapse = T,\n        searching = F,\n        ordering = F,\n        lengthChange = F,\n        paging = F,\n        info = F,\n        filter = 'none',\n        initComplete = JS(\n          \"function(settings, json) {\",\n          \"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});\",\n          \"}\"\n        )\n      ),\n      rownames = F\n    )\n  })\n  \n  # Flow Chart\n  pbp_flow <- reactive({\n    test <- pbp_data %>%\n      mutate(game = paste(game_date, home_team, away_team)) %>%\n      filter(game == input$game_id2) %>%\n      group_by(event_team) %>%\n      mutate(\n        isShot = ifelse(event_type %in% c(\"Shot\", \"Goal\"), 1, 0),\n        isGoal = ifelse(event_type == \"Goal\", 1, 0),\n        isPenalty = ifelse(event_type == \"Penalty\", 1, 0),\n        Shots = cumsum(isShot)\n      ) %>%\n      filter(isShot == 1 | isPenalty == 1) %>%\n      select(\n        game_seconds,\n        event_team,\n        home_team,\n        away_team,\n        home_skaters,\n        away_skaters,\n        isShot,\n        isGoal,\n        isPenalty,\n        Shots,\n        period\n      )\n    test <- bind_rows(\n      test,\n      data.frame(\n        game_seconds = c(0, 0, 1200 * max(test$period), 1200 * max(test$period)),\n        Shots = c(0, 0,\n                  last(test$Shots[which(test$event_team == test$home_team)]),\n                  last(test$Shots[which(test$event_team != test$home_team)])),\n        event_team = c(\n          test$home_team[1],\n          test$away_team[1],\n          test$home_team[1],\n          test$away_team[1]\n        ),\n        home_team = rep(test$home_team[1], 4),\n        away_team = rep(test$away_team[1], 4)\n      )\n    )\n  })\n  output$shotFlow <- renderPlot({\n    test <- pbp_flow()\n    ggplot(test) +\n      geom_step(aes(game_seconds / 60, Shots, color = event_team == home_team)) +\n      geom_vline(xintercept = test$game_seconds[which(test$isGoal == 1 &\n                                                        test$event_team == test$home_team)] / 60,\n                 color = \"blue\") +\n      geom_vline(xintercept = test$game_seconds[which(test$isGoal == 1 &\n                                                        test$event_team != test$home_team)] / 60,\n                 color = \"red\") +\n      labs(x = \"Minutes\", y = \"Shots For\") +\n      scale_color_manual(\n        name = \"Team\",\n        breaks = c(\"TRUE\", \"FALSE\"),\n        labels = c(test$home_team[1], test$away_team[1]),\n        values = c(\"indianred\", \"navyblue\")\n      ) +\n      geom_vline(xintercept = test$game_seconds[which(test$isGoal == 1 &\n                                                        test$event_team == test$home_team)] / 60,\n                 color = \"blue\") +\n      geom_vline(xintercept = test$game_seconds[which(test$isGoal == 1 &\n                                                        test$event_team != test$home_team)] / 60,\n                 color = \"red\") +\n      geom_vline(xintercept = test$game_seconds[which(test$isPenalty == 1 &\n                                                        test$event_team != test$home_team)] / 60,\n                 color = \"lightsalmon\") +\n      geom_vline(xintercept = test$game_seconds[which(test$isPenalty == 1 &\n                                                        test$event_team == test$home_team)] / 60,\n                 color = \"skyblue\") +\n      theme_classic()\n  }, height = 400, width = 1000)\n  \n  #Standings ----\n  \n  #Standings Page\n  output$standing <- renderDataTable({\n    season = input$season_standings\n    seasonid <- seasons$id[which(seasons$Season == season)]\n    otherid <- seasons$otherid[which(seasons$Season == season)]\n    url <-\n      getURL(\n        paste(\n          \"https://www.nwhl.zone/standings/show/\",\n          otherid,\n          \"?subseason=\",\n          seasonid,\n          sep = \"\"\n        )\n      )\n    ####----\n    table <- readHTMLTable(url)[[1]]\n    datatable(\n      table,\n      options = list(\n        scrollX = F,\n        scrollY = F,\n        scrollCollapse = F,\n        searching = F,\n        ordering = F,\n        lengthChange = F,\n        paging = F,\n        info = F,\n        filter = 'none',\n        initComplete = JS(\n          \"function(settings, json) {\",\n          \"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});\",\n          \"}\"\n        )\n      ),\n      rownames = F\n    )\n  })\n  # ----\n}",
    "created" : 1537644778389.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1295185165",
    "id" : "461F1DCF",
    "lastKnownWriteTime" : 1536744288,
    "last_content_update" : 1536744288,
    "path" : "~/Downloads/ESapp- V1/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}